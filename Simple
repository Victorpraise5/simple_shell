#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>

#define BUFFER_SIZE 1024

/**
 * custom_getline - Custom getline implementation
 *
 * Return: The line read from input or NULL on end of file or error
 */
char *custom_getline(void)
{
    static char buffer[BUFFER_SIZE];
    static ssize_t buffer_pos = 0;
    static ssize_t buffer_size = 0;

    char *line = NULL;
    ssize_t line_pos = 0;
    ssize_t read_chars;

    while (1)
    {
        // Check if the buffer is empty
        if (buffer_pos >= buffer_size)
        {
            buffer_pos = 0;
            buffer_size = read(STDIN_FILENO, buffer, BUFFER_SIZE);

            // Check if the end of file is reached or an error occurs
            if (buffer_size == 0 || buffer_size == -1)
                break;
        }

        // Read characters from the buffer until a newline or end of buffer
        while (buffer_pos < buffer_size)
        {
            if (buffer[buffer_pos] == '\n')
            {
                line = realloc(line, (line_pos + 1) * sizeof(char));
                line[line_pos] = '\0';
                buffer_pos++;
                return line;
            }
            else
            {
                line = realloc(line, (line_pos + 1) * sizeof(char));
                line[line_pos] = buffer[buffer_pos];
                line_pos++;
                buffer_pos++;
            }
        }
    }

    // Free memory and return NULL if end of file or error occurs
    free(line);
    return NULL;
}

/**
 * main - Entry point of the program
 *
 * Return: 0 on success
 */
int main(void)
{
    char *line;

    while (1)
    {
        line = custom_getline();

        if (line == NULL)
            break;

        printf("Input: %s\n", line);

        free(line);
    }

    return 0;
}

